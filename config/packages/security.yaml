security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    App\Entity\Centro:
        algorithm: auto
    App\Entity\Cliente:
        algorithm: auto
  providers:
    # used to reload user from session & other features (e.g. switch_user)
    centro_provider:
      entity:
        class: App\Entity\Centros
        property: email_centro
    cliente_provider:
      entity:
        class: App\Entity\Clientes
        property: email_cliente
    # used to reload user from session & other features (e.g. switch_user)
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      lazy: true
      provider: centro_provider # O cliente_provider según el tipo de usuario
        form_login:
                default_target_path: /empleados  # Ruta a la que se redirige después de iniciar sesión correctamente
                always_use_default_target_path: true  # Siempre redirigir al destino predeterminado después del inicio de sesión, incluso si se accedió a una página protegida
    cliente:
      lazy: true
      provider: cliente_provider # Usar este firewall para los clientes

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/centro, roles: ROLE_CENTRO }
    - { path: ^/cliente, roles: ROLE_CLIENTE }

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
